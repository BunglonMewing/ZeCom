-- ------------------------------------------------------------------------------------------------
-- ZenCom Supabase Schema
-- ------------------------------------------------------------------------------------------------
-- This script sets up the database tables, relationships, row-level security,
-- and storage for the ZenCom application.
--
-- Instructions:
-- 1. Go to your Supabase Project dashboard.
-- 2. Navigate to the "SQL Editor".
-- 3. Click "+ New query".
-- 4. Copy the entire content of this file and paste it into the editor.
-- 5. Click "RUN".
-- ------------------------------------------------------------------------------------------------

-- ------------------------------------------------------------------------------------------------
-- 1. PROFILES TABLE
-- Stores public user data. Linked to the private `auth.users` table.
-- ------------------------------------------------------------------------------------------------
CREATE TABLE public.profiles (
  id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name text,
  avatar_url text,
  updated_at timestamp with time zone
);

COMMENT ON TABLE public.profiles IS 'Public profile information for each user.';

-- Enable Row Level Security (RLS) for the profiles table.
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Policy: Allow users to read all profiles.
CREATE POLICY "Public profiles are viewable by everyone."
ON public.profiles FOR SELECT
USING ( true );

-- Policy: Allow users to insert their own profile.
CREATE POLICY "Users can insert their own profile."
ON public.profiles FOR INSERT
WITH CHECK ( auth.uid() = id );

-- Policy: Allow users to update their own profile.
CREATE POLICY "Users can update own profile."
ON public.profiles FOR UPDATE
USING ( auth.uid() = id )
WITH CHECK ( auth.uid() = id );

-- ------------------------------------------------------------------------------------------------
-- 2. TRIGGER to create a profile automatically when a new user signs up.
-- ------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- ------------------------------------------------------------------------------------------------
-- 3. POSTS TABLE
-- Stores the main content created by users.
-- ------------------------------------------------------------------------------------------------
CREATE TABLE public.posts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  content text NOT NULL CHECK (char_length(content) > 0),
  image_url text,
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

COMMENT ON TABLE public.posts IS 'User-generated posts with content and optional images.';

-- Enable RLS for the posts table.
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;

-- Create indexes for performance.
CREATE INDEX ON public.posts (user_id);

-- Policy: Allow users to read all posts.
CREATE POLICY "Posts are viewable by everyone."
ON public.posts FOR SELECT
USING ( true );

-- Policy: Allow authenticated users to create posts.
CREATE POLICY "Authenticated users can create posts."
ON public.posts FOR INSERT
WITH CHECK ( auth.role() = 'authenticated' AND auth.uid() = user_id );

-- Policy: Allow users to update their own posts.
CREATE POLICY "Users can update their own posts."
ON public.posts FOR UPDATE
USING ( auth.uid() = user_id )
WITH CHECK ( auth.uid() = user_id );

-- Policy: Allow users to delete their own posts.
CREATE POLICY "Users can delete their own posts."
ON public.posts FOR DELETE
USING ( auth.uid() = user_id );

-- ------------------------------------------------------------------------------------------------
-- 4. LIKES TABLE
-- Tracks which user liked which post.
-- ------------------------------------------------------------------------------------------------
CREATE TABLE public.likes (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  post_id bigint NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

COMMENT ON TABLE public.likes IS 'Tracks user likes on posts.';

-- Add a unique constraint to prevent duplicate likes from the same user on the same post.
ALTER TABLE public.likes ADD CONSTRAINT unique_like UNIQUE (post_id, user_id);

-- Enable RLS for the likes table.
ALTER TABLE public.likes ENABLE ROW LEVEL SECURITY;

-- Create indexes for performance.
CREATE INDEX ON public.likes (post_id);
CREATE INDEX ON public.likes (user_id);

-- Policy: Allow users to read all likes.
CREATE POLICY "Likes are viewable by everyone."
ON public.likes FOR SELECT
USING ( true );

-- Policy: Allow authenticated users to insert/delete their own likes.
CREATE POLICY "Users can insert and delete their own likes."
ON public.likes FOR ALL
USING ( auth.uid() = user_id )
WITH CHECK ( auth.uid() = user_id );

-- ------------------------------------------------------------------------------------------------
-- 5. COMMENTS TABLE
-- Stores comments on posts.
-- ------------------------------------------------------------------------------------------------
CREATE TABLE public.comments (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  post_id bigint NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  content text NOT NULL CHECK (char_length(content) > 0),
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

COMMENT ON TABLE public.comments IS 'User comments on posts.';

-- Enable RLS for the comments table.
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;

-- Create indexes for performance.
CREATE INDEX ON public.comments (post_id);
CREATE INDEX ON public.comments (user_id);

-- Policy: Allow users to read all comments.
CREATE POLICY "Comments are viewable by everyone."
ON public.comments FOR SELECT
USING ( true );

-- Policy: Allow authenticated users to create comments.
CREATE POLICY "Authenticated users can create comments."
ON public.comments FOR INSERT
WITH CHECK ( auth.role() = 'authenticated' AND auth.uid() = user_id );

-- Policy: Allow users to update their own comments.
CREATE POLICY "Users can update their own comments."
ON public.comments FOR UPDATE
USING ( auth.uid() = user_id )
WITH CHECK ( auth.uid() = user_id );

-- Policy: Allow users to delete their own comments.
CREATE POLICY "Users can delete their own comments."
ON public.comments FOR DELETE
USING ( auth.uid() = user_id );

-- ------------------------------------------------------------------------------------------------
-- 6. STORAGE (Post Images)
-- Set up a storage bucket for post images and define access policies.
-- ------------------------------------------------------------------------------------------------
-- Note: Bucket creation must be done from the Supabase Dashboard or via API.
-- This SQL only creates the policies.
--
-- Instructions for Storage Bucket:
-- 1. In your Supabase Dashboard, go to "Storage".
-- 2. Click "New Bucket".
-- 3. Enter "post-images" as the bucket name and make it a **public** bucket.
-- 4. Go to "Policies" for the `post-images` bucket and click "New policy".
-- 5. Create the policies below by copying the SQL into the policy editor.

-- Policy: Allow public read access to images.
-- This policy can be created via the UI by simply making the bucket public.
-- If you need a specific SQL command for it:
-- CREATE POLICY "Public read access for post images"
-- ON storage.objects FOR SELECT
-- USING ( bucket_id = 'post-images' );

-- Policy: Allow authenticated users to upload images.
CREATE POLICY "Authenticated users can upload images."
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK ( bucket_id = 'post-images' );

-- Policy: Allow users to update their own images.
-- The user_id is stored in the object metadata.
CREATE POLICY "Users can update their own images."
ON storage.objects FOR UPDATE
USING ( auth.uid() = (storage.foldername(name))[1]::uuid )
WITH CHECK ( auth.uid() = (storage.foldername(name))[1]::uuid );


-- Policy: Allow users to delete their own images.
CREATE POLICY "Users can delete their own images."
ON storage.objects FOR DELETE
USING ( auth.uid() = (storage.foldername(name))[1]::uuid );

-- To make this work, we will upload images to a folder named after the user's ID.
-- Example path: `post-images/USER_ID/image-name.png`
-- ------------------------------------------------------------------------------------------------
-- END OF SCHEMA
-- ------------------------------------------------------------------------------------------------